namespace {{rootNamespace}}.{{domain.Name}}
{
    using System;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Represents an adapter for the {{domain.Name}} domain to simplify the command interface.
    /// </summary>
    public class {{dehumanize domain.Name}}Adapter
    {
        private readonly ChromeSession m_session;
        
        public {{dehumanize domain.Name}}Adapter(ChromeSession session)
        {
            m_session = session ?? throw new ArgumentNullException(nameof(session));
        }

        /// <summary>
        /// Gets the ChromeSession associated with the adapter.
        /// </summary>
        public ChromeSession Session
        {
            get { return m_session; }
        }

    {{#each domain.Commands}}
        /// <summary>
        /// {{xml-code-comment Description 2}}
        /// </summary>
        public async Task<{{dehumanize Name}}CommandResponse> {{dehumanize Name}}({{dehumanize Name}}Command command{{#if NoParameters}} = null{{/if}}, string sessionId = null, CancellationToken cancellationToken = default(CancellationToken), int? millisecondsTimeout = null, bool throwExceptionIfResponseNotReceived = true)
        {
            return await m_session.SendCommand<{{dehumanize Name}}Command, {{dehumanize Name}}CommandResponse>(command{{#if NoParameters}} ?? new {{dehumanize Name}}Command(){{/if}}, sessionId, cancellationToken, millisecondsTimeout, throwExceptionIfResponseNotReceived);
        }
    {{/each}}

    {{#each domain.Events}}
        /// <summary>
        /// {{xml-code-comment Description 2}}
        /// </summary>
        public void SubscribeTo{{dehumanize Name}}Event(Action<{{dehumanize Name}}Event> eventCallback, string sessionId = "")
        {
            m_session.Subscribe(eventCallback, sessionId);
        }
    {{/each}}
    }
}